import hashlib
import datetime

class Block:
    def __init__(self, data, previous_hash):
        self.timestamp = datetime.datetime.now()
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        data_string = str(self.timestamp) + str(self.data) + str(self.previous_hash)
        return hashlib.sha256(data_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        # Create the first block in the chain with arbitrary data and a previous hash of 0
        return Block("Genesis Block", "0")

    def get_latest_block(self):
        # Return the last block in the chain
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]

            # Check if the hash of the current block is valid
            if current_block.hash != current_block.calculate_hash():
                return False

            # Check if the previous hash in the current block matches the hash of the previous block
            if current_block.previous_hash != previous_block.hash:
                return False

        return True

# Create a blockchain and add some blocks
my_blockchain = Blockchain()
my_blockchain.add_block(Block("Transaction 1", ""))
my_blockchain.add_block(Block("Transaction 2", ""))
my_blockchain.add_block(Block("Transaction 3", ""))

# Print the blocks in the blockchain
for block in my_blockchain.chain:
    print("Block Timestamp:", block.timestamp)
    print("Block Data:", block.data)
    print("Block Hash:", block.hash)
    print("Previous Block Hash:", block.previous_hash)
    print()

# Check if the blockchain is valid
print("Is the blockchain valid?", my_blockchain.is_chain_valid())
